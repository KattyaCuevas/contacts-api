# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/irb/all/irb.rbi
#
# irb-1.14.0

module IRB
end
module IRB::NestingParser
  def self.open_tokens(tokens); end
  def self.parse_by_line(tokens); end
  def self.scan_opens(tokens); end
end
class IRB::RubyLex
  def assignment_expression?(code, local_variables:); end
  def calc_indent_level(opens); end
  def check_code_state(code, local_variables:); end
  def check_code_syntax(code, local_variables:); end
  def check_termination_in_prev_line(code, local_variables:); end
  def code_terminated?(code, tokens, opens, local_variables:); end
  def free_indent_token?(token); end
  def indent_difference(lines, line_results, line_index); end
  def ltype_from_open_tokens(opens); end
  def process_indent_level(tokens, lines, line_index, is_newline); end
  def self.compile_with_errors_suppressed(code, line_no: nil); end
  def self.generate_local_variables_assign_code(local_variables); end
  def self.interpolate_ripper_ignored_tokens(code, tokens); end
  def self.ripper_lex_without_warning(code, local_variables: nil); end
  def should_continue?(tokens); end
end
class IRB::RubyLex::TerminateLineInput < StandardError
  def initialize; end
end
module IRB::Color
  def self.clear(colorable: nil); end
  def self.colorable?; end
  def self.colorize(text, seq, colorable: nil); end
  def self.colorize_code(code, complete: nil, ignore_error: nil, colorable: nil, local_variables: nil); end
  def self.dispatch_seq(token, expr, str, in_symbol:); end
  def self.inspect_colorable?(obj, seen: nil); end
  def self.scan(code, allow_last_error:); end
  def self.without_circular_ref(obj, seen:, &block); end
end
class IRB::Color::SymbolState
  def initialize; end
  def scan_token(token); end
end
class IRB::ColorPrinter < PP
  def pp(obj); end
  def self.pp(obj, out = nil, width = nil); end
  def self.screen_width; end
  def text(str, width = nil); end
end
module IRB::HelperMethod
end
class IRB::HelperMethod::Base
  extend Singleton::SingletonClassMethods
  include Singleton
end
class IRB::HelperMethod::Conf < IRB::HelperMethod::Base
end
class IRB::WorkSpace
end
module IRB::HelpersContainer
end
class IRB::Inspector
end
class IRB::BaseCompletor
end
class IRB::TypeCompletor < IRB::BaseCompletor
end
class IRB::RegexpCompletor < IRB::BaseCompletor
end
module IRB::InputCompletor
end
module IRB::HistorySavingAbility
end
class IRB::InputMethod
end
class IRB::StdioInputMethod < IRB::InputMethod
end
class IRB::FileInputMethod < IRB::InputMethod
end
class IRB::ReadlineInputMethod < IRB::StdioInputMethod
  include IRB::HistorySavingAbility
end
class IRB::RelineInputMethod < IRB::StdioInputMethod
  include IRB::HistorySavingAbility
end
class IRB::ReidlineInputMethod < IRB::RelineInputMethod
end
class IRB::OutputMethod
end
class IRB::StdioOutputMethod < IRB::OutputMethod
end
class IRB::Context
end
module IRB::Command
end
class IRB::Command::CommandArgumentError < StandardError
end
class IRB::Command::Base
end
module IRB::Command::RubyArgsExtractor
end
module IRB::Debug
end
module InvalidName___Class_0x00___SkipPathHelperForIRB_38
end
class IRB::Command::Debug < IRB::Command::Base
end
class IRB::Command::DebugCommand < IRB::Command::Debug
end
class IRB::Command::Backtrace < IRB::Command::DebugCommand
end
class IRB::Command::Break < IRB::Command::DebugCommand
end
class IRB::Command::Catch < IRB::Command::DebugCommand
end
class IRB::Command::CD < IRB::Command::Base
end
class IRB::Command::CurrentWorkingWorkspace < IRB::Command::Base
end
class IRB::Command::ChangeWorkspace < IRB::Command::Base
end
class IRB::Command::Context < IRB::Command::Base
end
class IRB::Command::Continue < IRB::Command::DebugCommand
end
class IRB::Command::Delete < IRB::Command::DebugCommand
end
class IRB::Command::DisableIrb < IRB::Command::Base
end
class IRB::SourceFinder
end
class IRB::SourceFinder::EvaluationError < StandardError
end
class IRB::SourceFinder::Source
end
class IRB::Command::Edit < IRB::Command::Base
  include IRB::Command::RubyArgsExtractor
end
class IRB::Command::Exit < IRB::Command::Base
end
class IRB::Command::Finish < IRB::Command::DebugCommand
end
class IRB::Command::ForceExit < IRB::Command::Base
end
class IRB::Command::Help < IRB::Command::Base
end
class IRB::Pager
end
class IRB::Command::History < IRB::Command::Base
end
class IRB::Command::Info < IRB::Command::DebugCommand
end
class IRB::Command::IrbInfo < IRB::Command::Base
end
class IRB::LoadAbort < Exception
end
module IRB::IrbLoader
end
class IRB::Command::LoaderCommand < IRB::Command::Base
  include IRB::Command::RubyArgsExtractor
  include IRB::IrbLoader
end
class IRB::Command::Load < IRB::Command::LoaderCommand
end
class IRB::Command::Require < IRB::Command::LoaderCommand
end
class IRB::Command::Source < IRB::Command::LoaderCommand
end
class IRB::Command::Ls < IRB::Command::Base
  include IRB::Command::RubyArgsExtractor
end
class IRB::Command::Ls::Output
end
class IRB::Command::Measure < IRB::Command::Base
  include IRB::Command::RubyArgsExtractor
end
class IRB::Command::Next < IRB::Command::DebugCommand
end
class IRB::Command::Workspaces < IRB::Command::Base
end
class IRB::Command::PushWorkspace < IRB::Command::Workspaces
end
class IRB::Command::PopWorkspace < IRB::Command::Workspaces
end
class IRB::Command::ShowDoc < IRB::Command::Base
  include IRB::Command::RubyArgsExtractor
end
class IRB::Command::ShowSource < IRB::Command::Base
  include IRB::Command::RubyArgsExtractor
end
class IRB::Command::Step < IRB::Command::DebugCommand
end
class IRB::Command::MultiIRBCommand < IRB::Command::Base
  include IRB::Command::RubyArgsExtractor
end
class IRB::Command::IrbCommand < IRB::Command::MultiIRBCommand
end
class IRB::Command::Jobs < IRB::Command::MultiIRBCommand
end
class IRB::Command::Foreground < IRB::Command::MultiIRBCommand
end
class IRB::Command::Kill < IRB::Command::MultiIRBCommand
end
class IRB::Command::Whereami < IRB::Command::Base
end
module IRB::ExtendCommandBundle
end
class IRB::Statement
end
class IRB::Statement::EmptyInput < IRB::Statement
end
class IRB::Statement::Expression < IRB::Statement
end
class IRB::Statement::Command < IRB::Statement
end
class IRB::Locale
end
class InvalidName___Class_0x00___Vec_39
end
class InvalidName___Class_0x00___Canvas_40
end
class InvalidName___Class_0x00___RubyModel_41
end
class IRB::Abort < Exception
end
class IRB::Irb
end
class Binding
end
